#Insert parameters if necessary, otherwise remove this
param(
$QueryUser,
$QueryPwd,
[string]$Uid,
[string]$URL,
[string]$rule
)

### Define Operations Manager objects ###
$momScriptAPI = new-object -comObject 'MOM.ScriptAPI'

$scriptName = "Opslogix.Grafana.Labs.Grafana.AlertManager.Instance.ActiveRules.ps1"
$version = "2.0"
$scriptOutput = ""


# Event log functions
function Write-Event($EventID, $Severity, $Message) {
    $momScriptAPI.LogScriptEvent($scriptName, $EventID, $Severity, "Version: $version`n$Message")
}
function Write-InfoEvent($EventID, $Message) {
    Write-Event -EventID $EventID -Severity 0 -Message $Message
}
function Write-WarningEvent($EventID, $Message) {
    Write-Event -EventID $EventID -Severity 2 -Message $Message
}
function Write-ErrorEvent($EventID, $Message) {
    Write-Event -EventID $EventID -Severity 1 -Message $Message
}

function Exit-Script() {
    Write-InfoEvent -EventID 5480 -Message $scriptOutput
    exit
}

# Get the active alerts from Grafana AlertManager API
$response = Invoke-RestMethod -Uri "$URL/api/alertmanager/grafana/api/v2/alerts/" -Method Get

# Filter the response to match the specific rule (alertname)
$filteredAlerts = $response | Where-Object { $_.labels.alertname -eq $rule }

# Check if the output is empty (no active rules)
if ($filteredAlerts -eq $null -or $filteredAlerts.Count -eq 0) {
    # No active rules = rules is in healthy conditions
    $alertSummary = "OK, no active Alert Rules in Grafana was found"
    $propertyBag = $momScriptAPI.CreatePropertyBag()
    $propertyBag.AddValue('Result', "OK")
    $propertyBag.AddValue('AlertSummary', $alertSummary)
    $propertyBag
} else {
    # Build a summary of all active rules
    $alertSummary = "Alert Rule '$rule' is under state Firing:`n`n"
    $alertCount = 0
    foreach ($alert in $filteredAlerts) {
        if ($alert.status.state -eq "active") {
            $alertCount++
            $alertName = $alert.labels.alertname
            $alertStart = $alert.startsAt
            # Adjust the time and format it to "yyyy-MM-dd HH:mm:ss"
            $alertStart = ([datetime]$alert.startsAt).AddHours(2).ToString("yyyy-MM-dd HH:mm:ss")

            # Adding the information/data into each specific alert/rule in the Summary
            $alertSummary += "$alertStart LABELS: "

            # Dynamically list all available labels on a single line separated by commas
            $labels = @()
            foreach ($label in $alert.labels.PSObject.Properties) {
                $labelName = $label.Name
                $labelValue = $label.Value

                # Exclude specific labels that are not interesting to present in the SCOM alert
                if ($labelName -notin "__alert_rule_uid__", "__grafana_autogenerated__", "__grafana_receiver__", "OperatedBy", "SCOMEnabled", "alertname") {
                    $labels += "[${labelName}: ${labelValue}]"
                }
            }

            $alertSummary += ($labels -join " ") + "`n"
        }
    }

    # Creating the URL that is presented in the SCOM alert
    $generatorURL = "$URL/alerting/grafana/$Uid/view"
    $alertSummary += "`n`nFor further analysis, please visit $generatorURL"

    # Creating the property bag
    $propertyBag = $momScriptAPI.CreatePropertyBag()
    $propertyBag.AddValue('Result', "CRITICAL")
    $propertyBag.AddValue('AlertSummary', $alertSummary)
    $propertyBag.AddValue('rule', $rule)
    $propertyBag
}

Write-InfoEvent -EventID 5470 -Message $scriptOutput
